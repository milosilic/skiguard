package com.bitgear.skiguard.dao;

import org.greenrobot.greendao.annotation.*;

import com.bitgear.skiguard.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "HISTORY".
 */
@Entity(active = true)
public class History {

    @Id(autoincrement = true)
    private Long id;
    private int id_device;
    private float lat;
    private float lng;
    private int battery;
    private int id_track_change;
    private Long last_piste;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient HistoryDao myDao;

    @ToOne(joinProperty = "last_piste")
    private Piste piste;

    @Generated
    private transient Long piste__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public History() {
    }

    public History(Long id) {
        this.id = id;
    }

    @Generated
    public History(Long id, int id_device, float lat, float lng, int battery, int id_track_change, Long last_piste) {
        this.id = id;
        this.id_device = id_device;
        this.lat = lat;
        this.lng = lng;
        this.battery = battery;
        this.id_track_change = id_track_change;
        this.last_piste = last_piste;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHistoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getId_device() {
        return id_device;
    }

    public void setId_device(int id_device) {
        this.id_device = id_device;
    }

    public float getLat() {
        return lat;
    }

    public void setLat(float lat) {
        this.lat = lat;
    }

    public float getLng() {
        return lng;
    }

    public void setLng(float lng) {
        this.lng = lng;
    }

    public int getBattery() {
        return battery;
    }

    public void setBattery(int battery) {
        this.battery = battery;
    }

    public int getId_track_change() {
        return id_track_change;
    }

    public void setId_track_change(int id_track_change) {
        this.id_track_change = id_track_change;
    }

    public Long getLast_piste() {
        return last_piste;
    }

    public void setLast_piste(Long last_piste) {
        this.last_piste = last_piste;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Piste getPiste() {
        Long __key = this.last_piste;
        if (piste__resolvedKey == null || !piste__resolvedKey.equals(__key)) {
            __throwIfDetached();
            PisteDao targetDao = daoSession.getPisteDao();
            Piste pisteNew = targetDao.load(__key);
            synchronized (this) {
                piste = pisteNew;
            	piste__resolvedKey = __key;
            }
        }
        return piste;
    }

    @Generated
    public void setPiste(Piste piste) {
        synchronized (this) {
            this.piste = piste;
            last_piste = piste == null ? null : piste.getId();
            piste__resolvedKey = last_piste;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        History history = (History) o;

        return getId_track_change() == history.getId_track_change();

    }

    @Override
    public int hashCode() {
        return getId_track_change();
    }
    // KEEP METHODS END

}
