package com.bitgear.skiguard.dao;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.ToOne;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "DEVICE".
 */
@Entity(active = true)
public class Device {

    @Id(autoincrement = true)
    private Long id;
    private String serial_number;
    private String color;
    private String name;
    private Long last_update;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient DeviceDao myDao;

    @ToOne(joinProperty = "last_update")
    private History history;

    @Generated
    private transient Long history__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Device() {
    }

    public Device(Long id) {
        this.id = id;
    }

    @Generated
    public Device(Long id, String serial_number, String color, String name, Long last_update) {
        this.id = id;
        this.serial_number = serial_number;
        this.color = color;
        this.name = name;
        this.last_update = last_update;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDeviceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSerial_number() {
        return serial_number;
    }

    public void setSerial_number(String serial_number) {
        this.serial_number = serial_number;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Long getLast_update() {
        return last_update;
    }

    public void setLast_update(Long last_update) {
        this.last_update = last_update;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public History getHistory() {
        Long __key = this.last_update;
        if (history__resolvedKey == null || !history__resolvedKey.equals(__key)) {
            __throwIfDetached();
            HistoryDao targetDao = daoSession.getHistoryDao();
            History historyNew = targetDao.load(__key);
            synchronized (this) {
                history = historyNew;
            	history__resolvedKey = __key;
            }
        }
        return history;
    }

    @Generated
    public void setHistory(History history) {
        synchronized (this) {
            this.history = history;
            last_update = history == null ? null : history.getId();
            history__resolvedKey = last_update;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public String toString() {
        return "Device{" +
                "id=" + id +
                ", serial_number='" + serial_number + '\'' +
                ", color='" + color + '\'' +
                ", name='" + name + '\'' +
                ", last_update=" + last_update +
                ", daoSession=" + daoSession +
                ", myDao=" + myDao +
                ", history=" + history +
                ", history__resolvedKey=" + history__resolvedKey +
                '}';
    }
    // KEEP METHODS END

}
